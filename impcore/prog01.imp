;; Name: Kocsen Chung
;; Time spent on assignment: 3h
;; Collaborators: N/A

;; Exercise 3
(define sigma (m n)
    (if (= m n)
        m
        ;; else
        (+ 
            m 
            (sigma (+ m 1) n)
        )
    )
)

;; Exercise 4a
(define exp (m n)
    (if (= n 0)
        1
        (*
            m
            (exp m (- n 1))
        )
    )
)

;; Exercise 4b
(define log (m n)
    (log_helper m n 1)
)

;; Helper for recursive log
(define log_helper (m n l)
    (if 
        ;; conditional
        (> 
            (exp m l)
            n
        )
        ;; then
        (- l 1)
        ;; else
        (log_helper m n (+ l 1))
    )
    
)

;; Exercise 5
(define choose (n k)
    ;; add additional check for n < 0 or k < 0
    (if (and (< n 0) (< k 0) )
        -1
        (if (= k 0)
            1
            (if (= n k)
                1
                (+
                    (choose (- n 1) k )
                    (choose (- n 1) (- k 1))
                )
            )
        )
    )
)

;; And operator helper function
(define and (a b)
    (if a
        (if b
            1
            0
        )
        0
    )
)

;; factorial helper function
(define factorial ( n ) 
    (if (= n 0)
        0
        (if (= n 1)
            1
            (* n (factorial (- n 1) ))
        )
    )
)


;; Exercise 6
(define fib (m)
    (if (= m 0)
        0
        (if (= m 1)
            1
            (+
                ( fib (- m 1) )
                ( fib (- m 2) )
            )
        )
    )
)

;; Exercise 7a
(define prime? (n)
    ;; Assuming 1 is NOT prime
    (if (< n 2)
        0 ;; false
        (prime_helper n (- n 1))
    )
)

;; Prime Helper returns true if prime, false otherwise
(define prime_helper (n m)
    (if (= m 1)
        1
        (if (> (mod n m) 0) ;; if n%m > 0
            (prime_helper n (- m 1))
            0
        )
    )
)
    
;; Mod helper function
;; Only works when b < a
(define mod (a b)
    (if (< a b)
        -1
        ;; return a - ((a/b) * b)
        (-
            a
            (* (/ a b) b)
        )
    )
)

;; Exercise 7b
(define nthprime (n)
    (if (= n 1)
        2
    ;; else 
        (nthprime_helper n 3 1)
    )
)

;; nthprime helper function
;; Will go through every odd number to find the prime
;; always assumes n > 2
(define nthprime_helper (n curr found) 
    (if (= found n)
        (- curr 2)
        (if (prime? curr)
            ;; 
            (nthprime_helper n (+ curr 2) (+ found 1))
            (nthprime_helper n (+ curr 2) found)
        )
    )
)

;; Exercise 7c
(define sumprimes (n)
    (if (= n 0)
        0
        ;; else
        (sumprimes_helper n (nthprime n))
    )
)

;; Sumprimes helper.
;; Will count down from n to 1 and return rolling sum of primes
(define sumprimes_helper (n curr)
    (if (< n 2)
        curr
        (sumprimes_helper 
            (- n 1)
            (+ curr (nthprime (- n 1)) )
        )
    )
)

;; Exercise 7d
(define relprime? (m n)
    (if 1
        1
    ;; else
        0
    )
)

;; Exercise 8
;; DEFINE binary HERE
